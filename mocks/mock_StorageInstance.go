// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/levenlabs/order-up/storage"
	mock "github.com/stretchr/testify/mock"
)

// MockStorageInstance is an autogenerated mock type for the StorageInstance type
type MockStorageInstance struct {
	mock.Mock
}

// GetOrder provides a mock function with given fields: ctx, id
func (_m *MockStorageInstance) GetOrder(ctx context.Context, id string) (storage.Order, error) {
	ret := _m.Called(ctx, id)

	var r0 storage.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) storage.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(storage.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, status
func (_m *MockStorageInstance) GetOrders(ctx context.Context, status storage.OrderStatus) ([]storage.Order, error) {
	ret := _m.Called(ctx, status)

	var r0 []storage.Order
	if rf, ok := ret.Get(0).(func(context.Context, storage.OrderStatus) []storage.Order); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.OrderStatus) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOrder provides a mock function with given fields: ctx, order
func (_m *MockStorageInstance) InsertOrder(ctx context.Context, order storage.Order) (string, error) {
	ret := _m.Called(ctx, order)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, storage.Order) string); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetOrderStatus provides a mock function with given fields: ctx, id, status
func (_m *MockStorageInstance) SetOrderStatus(ctx context.Context, id string, status storage.OrderStatus) error {
	ret := _m.Called(ctx, id, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, storage.OrderStatus) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
